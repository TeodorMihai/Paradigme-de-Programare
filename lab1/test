#lang racket
(max (+ 2 3) 4)

(if (= 2 3) 4 (max (+ 3 4) 8))

(cons 1 2)

(car ( cons 1 2 ) ) 
(cdr ( cons 3 (cons 4 2) ) ) 
(cons 1 (cons 2 ( cons 3 null) ) ) 
(cdr (cons 'a ( cons 'b (cons 'c '()))) )

(cdr (list 'a 'b 'c))

(quote ( 1 2 3 4) )
'(1 2 3 )

(car(cdr(cdr '(1 2 3 4 5 6) ) ) ) 
(caddr '(1 2 3 4 5 6))

(append (list 1 2 3 ) (list 1 4 5 7 8 ) (list 1 8 2 3) )

(null? '() )

(reverse '( 1 (2 3) 4) )

(list? 2)

(list 1 2 'a)

(define my_list (list 1 2 'a))
my_list

'(1 2 b)

'( (+ 3 5) 4 ) 

(list (+ 3 5) 4)

 ((lambda (x) (* x x ) ) 2)
 
 (define patrat (lambda (x) (* x x)))
 
 (patrat 3)
 
 (define sum (lambda (x y) (+ x y)))
 
 (sum 2 3)
 
 (modulo 5 2)
 
 (quotient 5 2)
 
 (/ 5 2)
 
 (equal? '(1 2) '(1 2) )
 (define a 10)
 
 (if (< a 0)
     a
     (if (> a 10)
         (* a a)
         (* a (* a a))))
 
 (define ( factorial n ) 
   (if (= n 0)
       1
       (* n (factorial ( - n 1)))))
 
 
 ( factorial 6)
 
 (define (sum-list L) 
   (if (null? L) 
       0
       (+ (car L) ( sum-list (cdr L)))))
 
 (sum-list '( 3 4 5) )
 
